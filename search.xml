<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[最長回文算法]]></title>
    <url>%2F2017%2F07%2F08%2FMY-NEW-POST%2F</url>
    <content type="text"><![CDATA[1.Brute Force(暴力算法)123456789101112131415161718public String longestPalindrome(String s)&#123; int l=s.length(); int max=1; int start=0; for(int i=0;i&lt;l;i++) for(int j=i+1;j&lt;l;j++)&#123; int temp1,temp2; for(temp1=i,temp2=j;temp1&lt;temp2;temp1++,temp2--) if(s.charAt(temp1)!=s.charAt(temp2)&#123; break; &#125; if(temp1&gt;=temp2&amp;&amp;j-i&gt;=max)&#123; max=j-i+1; start=i; &#125; &#125; return s.substring(start,start+max);&#125; 2.Dynamic Programming(動態規劃)可以根据动态规划的两个特点：第一大问题拆解为小问题，第二重复利用之前的计算结果，来解答这道题。那如何划分小问题呢，我们可以先把所有长度最短为1的子字符串计算出来，根据起始位置从左向右，这些必定是回文。然后计算所有长度为2的子字符串，再根据起始位置从左向右。到长度为3的时候，我们就可以利用上次的计算结果：如果中心对称的短字符串不是回文，那长字符串也不是，如果短字符串是回文，那就要看长字符串两头是否一样。这样，一直到长度最大的子字符串，我们就把整个字符串集穷举完了，但是由于使用动态规划，使计算时间从O(N^3)减少到O(n^2)。1234567891011121314151617181920212223242526public String longestPalindrome(String s)&#123; int l=s.length(); int max=0; int start=0; boolean[][] dp=new boolean[l][l]; for(int i=0;i&lt;l;i++)&#123; dp[i][i]=true; if(i&lt;l-1 &amp;&amp; s.charAt(i)==s.charAt(i+1))&#123; dp[i][i+1]=true; max=2; start=i; &#125; &#125; for(int len=3;len&lt;=l;len++)//子串長度 for(int i=0;i&lt;=l-len;i++)&#123;//子串開始位置 int j=i+len-1;//子串結束位置 if(dp[i+1][j-1]&amp;&amp;s.charAt(i)==s.charAt(j))&#123; dp[i][j]=true; max=len; start=i; &#125; &#125; if(max&gt;=2) return s.substring(start,start+max); return ""+s.charAt(0); &#125; 3.Expand around center(中心擴展)动态规划虽然优化了时间，但也浪费了空间。实际上并不需要一直存储所有子字符串的回文情况，需要知道的只是中心对称的较小一层是否是回文。所以如果从小到大连续以某点为个中心的所有子字符串进行计算，就能省略这个空间。 这种解法中，外层循环遍历的是子字符串的中心点，内层循环则是从中心扩散，一旦不是回文就不再计算其他以此为中心的较大的字符串。由于中心对称有两种情况，一是奇数个字母以某个字母对称，而是偶数个字母以两个字母中间为对称，所以要分别计算这两种对称情况。1234567891011121314151617181920212223int max=0;int start=0;public String longestPalindrome(String s)&#123; int l=s.length(); for(int i=0;i&lt;l;i++)&#123; expand(s,i,0);//奇數串 expand(s,i,1);//偶數串 &#125; return s.substring(start,start+max);&#125;public void expand(String s,int i,int j)&#123; int l=i; int r=i+j; while(l&gt;=0&amp;&amp;r&lt;s.length()&amp;&amp;s.charAt(l)==s.charAt(r))&#123; if(r-l+1&gt;max)&#123; max=r-l+1; start=l; &#125; l--; r++; &#125;&#125; 4.Manacher(馬拉車算法)12345678910111213141516171819202122232425262728293031323334353637public String longestPalindrome(String s)&#123; if(s.length()&lt;=1)&#123; return s; &#125; String str=preProcess(s);//避免奇偶 int id=0;//當前最右回文串中心點 int max=0;//當前最右回文串右邊界 int maxId=0;//當前最長回文串中心點 int maxSpan=0;//當前最長回文串向左或向右能延伸的長度 int[] p=new int[str.length()]; for(int curr=1;curr&lt;str.length();curr++)&#123; p[curr]=curr&lt;max?Math.min(p[2*id-curr],max-curr):1; while((curr+p[curr])&lt;str.length()&amp;&amp;str.charAt(curr+p[curr])==str.charAt(curr-p[curr]))&#123; p[curr]++; &#125; if(curr+p[curr]&gt;max)&#123; max=curr+p[curr]; id=curr; &#125; if(p[curr]&gt;maxSpan)&#123; maxSpan=p[curr]; maxId=curr; &#125; &#125; return s.substring((maxId-maxSpan)/2,(maxId+maxSpan)/2-1);&#125;public String preProcess(String s)&#123; StringBuilder sb=new StringBuilder(); sb.append("$"); for(int i=0;i&lt;s.length();i++)&#123; sb.append("#"); sb.append(s.charAt(i)); &#125; sb.append("#"); return sb.toString();&#125;]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hello world!]]></title>
    <url>%2F2017%2F07%2F06%2Fworld%2F</url>
    <content type="text"><![CDATA[hello world]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hello</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F07%2F06%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>