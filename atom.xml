<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  <subtitle>hello world</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://tongnianmianbao.github.io/"/>
  <updated>2017-08-16T12:02:16.226Z</updated>
  <id>https://tongnianmianbao.github.io/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>最長回文算法</title>
    <link href="https://tongnianmianbao.github.io/2017/07/08/MY-NEW-POST/"/>
    <id>https://tongnianmianbao.github.io/2017/07/08/MY-NEW-POST/</id>
    <published>2017-07-08T03:44:35.000Z</published>
    <updated>2017-08-16T12:02:16.226Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-Brute-Force-暴力算法"><a href="#1-Brute-Force-暴力算法" class="headerlink" title="1.Brute Force(暴力算法)"></a>1.Brute Force(暴力算法)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">longestPalindrome</span><span class="params">(String s)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> l=s.length();</div><div class="line">    <span class="keyword">int</span> max=<span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> start=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;l;i++)</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;l;j++)&#123;</div><div class="line">            <span class="keyword">int</span> temp1,temp2;</div><div class="line">            <span class="keyword">for</span>(temp1=i,temp2=j;temp1&lt;temp2;temp1++,temp2--)</div><div class="line">                <span class="keyword">if</span>(s.charAt(temp1)!=s.charAt(temp2)&#123;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            <span class="keyword">if</span>(temp1&gt;=temp2&amp;&amp;j-i&gt;=max)&#123;</div><div class="line">            max=j-i+<span class="number">1</span>;</div><div class="line">            start=i;</div><div class="line">            &#125;					</div><div class="line">        &#125;</div><div class="line">    <span class="keyword">return</span> s.substring(start,start+max);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2-Dynamic-Programming-動態規劃"><a href="#2-Dynamic-Programming-動態規劃" class="headerlink" title="2.Dynamic Programming(動態規劃)"></a>2.Dynamic Programming(動態規劃)</h3><p>可以根据动态规划的两个特点：第一大问题拆解为小问题，第二重复利用之前的计算结果，来解答这道题。那如何划分小问题呢，我们可以先把所有长度最短为1的子字符串计算出来，根据起始位置从左向右，这些必定是回文。然后计算所有长度为2的子字符串，再根据起始位置从左向右。到长度为3的时候，我们就可以利用上次的计算结果：如果中心对称的短字符串不是回文，那长字符串也不是，如果短字符串是回文，那就要看长字符串两头是否一样。这样，一直到长度最大的子字符串，我们就把整个字符串集穷举完了，但是由于使用动态规划，使计算时间从O(N^3)减少到O(n^2)。<br><a id="more"></a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">longestPalindrome</span><span class="params">(String s)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> l=s.length();</div><div class="line">    <span class="keyword">int</span> max=<span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> start=<span class="number">0</span>;</div><div class="line">    <span class="keyword">boolean</span>[][] dp=<span class="keyword">new</span> <span class="keyword">boolean</span>[l][l];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;l;i++)&#123;</div><div class="line">        dp[i][i]=<span class="keyword">true</span>;</div><div class="line">        <span class="keyword">if</span>(i&lt;l-<span class="number">1</span> &amp;&amp; s.charAt(i)==s.charAt(i+<span class="number">1</span>))&#123;</div><div class="line">            dp[i][i+<span class="number">1</span>]=<span class="keyword">true</span>;</div><div class="line">            max=<span class="number">2</span>;</div><div class="line">            start=i;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> len=<span class="number">3</span>;len&lt;=l;len++)<span class="comment">//子串長度</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=l-len;i++)&#123;<span class="comment">//子串開始位置</span></div><div class="line">            <span class="keyword">int</span> j=i+len-<span class="number">1</span>;<span class="comment">//子串結束位置</span></div><div class="line">            <span class="keyword">if</span>(dp[i+<span class="number">1</span>][j-<span class="number">1</span>]&amp;&amp;s.charAt(i)==s.charAt(j))&#123;</div><div class="line">                dp[i][j]=<span class="keyword">true</span>;</div><div class="line">                max=len;</div><div class="line">                start=i;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    <span class="keyword">if</span>(max&gt;=<span class="number">2</span>) </div><div class="line">        <span class="keyword">return</span> s.substring(start,start+max);</div><div class="line">    <span class="keyword">return</span> <span class="string">""</span>+s.charAt(<span class="number">0</span>);    </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="3-Expand-around-center-中心擴展"><a href="#3-Expand-around-center-中心擴展" class="headerlink" title="3.Expand around center(中心擴展)"></a>3.Expand around center(中心擴展)</h3><p>动态规划虽然优化了时间，但也浪费了空间。实际上并不需要一直存储所有子字符串的回文情况，需要知道的只是中心对称的较小一层是否是回文。所以如果从小到大连续以某点为个中心的所有子字符串进行计算，就能省略这个空间。 这种解法中，外层循环遍历的是子字符串的中心点，内层循环则是从中心扩散，一旦不是回文就不再计算其他以此为中心的较大的字符串。由于中心对称有两种情况，一是奇数个字母以某个字母对称，而是偶数个字母以两个字母中间为对称，所以要分别计算这两种对称情况。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> max=<span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> start=<span class="number">0</span>;</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">longestPalindrome</span><span class="params">(String s)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> l=s.length();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;l;i++)&#123;</div><div class="line">        expand(s,i,<span class="number">0</span>);<span class="comment">//奇數串</span></div><div class="line">        expand(s,i,<span class="number">1</span>);<span class="comment">//偶數串</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> s.substring(start,start+max);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">expand</span><span class="params">(String s,<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> l=i;</div><div class="line">    <span class="keyword">int</span> r=i+j;</div><div class="line">    <span class="keyword">while</span>(l&gt;=<span class="number">0</span>&amp;&amp;r&lt;s.length()&amp;&amp;s.charAt(l)==s.charAt(r))&#123;</div><div class="line">        <span class="keyword">if</span>(r-l+<span class="number">1</span>&gt;max)&#123;</div><div class="line">            max=r-l+<span class="number">1</span>;</div><div class="line">            start=l;</div><div class="line">        &#125;</div><div class="line">        l--;</div><div class="line">        r++;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="4-Manacher-馬拉車算法"><a href="#4-Manacher-馬拉車算法" class="headerlink" title="4.Manacher(馬拉車算法)"></a>4.Manacher(馬拉車算法)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">longestPalindrome</span><span class="params">(String s)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(s.length()&lt;=<span class="number">1</span>)&#123;</div><div class="line">        <span class="keyword">return</span> s;</div><div class="line">    &#125;</div><div class="line">    String str=preProcess(s);<span class="comment">//避免奇偶</span></div><div class="line">    <span class="keyword">int</span> id=<span class="number">0</span>;<span class="comment">//當前最右回文串中心點</span></div><div class="line">    <span class="keyword">int</span> max=<span class="number">0</span>;<span class="comment">//當前最右回文串右邊界</span></div><div class="line">    <span class="keyword">int</span> maxId=<span class="number">0</span>;<span class="comment">//當前最長回文串中心點</span></div><div class="line">    <span class="keyword">int</span> maxSpan=<span class="number">0</span>;<span class="comment">//當前最長回文串向左或向右能延伸的長度</span></div><div class="line">    <span class="keyword">int</span>[] p=<span class="keyword">new</span> <span class="keyword">int</span>[str.length()];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> curr=<span class="number">1</span>;curr&lt;str.length();curr++)&#123;</div><div class="line">        p[curr]=curr&lt;max?Math.min(p[<span class="number">2</span>*id-curr],max-curr):<span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span>((curr+p[curr])&lt;str.length()&amp;&amp;str.charAt(curr+p[curr])==str.charAt(curr-p[curr]))&#123;</div><div class="line">            p[curr]++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(curr+p[curr]&gt;max)&#123;</div><div class="line">            max=curr+p[curr];</div><div class="line">            id=curr;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(p[curr]&gt;maxSpan)&#123;</div><div class="line">            maxSpan=p[curr];</div><div class="line">            maxId=curr;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> s.substring((maxId-maxSpan)/<span class="number">2</span>,(maxId+maxSpan)/<span class="number">2</span>-<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">preProcess</span><span class="params">(String s)</span></span>&#123;</div><div class="line">    StringBuilder sb=<span class="keyword">new</span> StringBuilder();</div><div class="line">    sb.append(<span class="string">"$"</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)&#123;</div><div class="line">        sb.append(<span class="string">"#"</span>);</div><div class="line">        sb.append(s.charAt(i));</div><div class="line">    &#125;</div><div class="line">    sb.append(<span class="string">"#"</span>);</div><div class="line">    <span class="keyword">return</span> sb.toString();</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-Brute-Force-暴力算法&quot;&gt;&lt;a href=&quot;#1-Brute-Force-暴力算法&quot; class=&quot;headerlink&quot; title=&quot;1.Brute Force(暴力算法)&quot;&gt;&lt;/a&gt;1.Brute Force(暴力算法)&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;longestPalindrome&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String s)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; l=s.length();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; max=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; start=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i&amp;lt;l;i++)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j=i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;j&amp;lt;l;j++)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; temp1,temp2;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(temp1=i,temp2=j;temp1&amp;lt;temp2;temp1++,temp2--)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(s.charAt(temp1)!=s.charAt(temp2)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(temp1&amp;gt;=temp2&amp;amp;&amp;amp;j-i&amp;gt;=max)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            max=j-i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            start=i;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;					&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; s.substring(start,start+max);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;2-Dynamic-Programming-動態規劃&quot;&gt;&lt;a href=&quot;#2-Dynamic-Programming-動態規劃&quot; class=&quot;headerlink&quot; title=&quot;2.Dynamic Programming(動態規劃)&quot;&gt;&lt;/a&gt;2.Dynamic Programming(動態規劃)&lt;/h3&gt;&lt;p&gt;可以根据动态规划的两个特点：第一大问题拆解为小问题，第二重复利用之前的计算结果，来解答这道题。那如何划分小问题呢，我们可以先把所有长度最短为1的子字符串计算出来，根据起始位置从左向右，这些必定是回文。然后计算所有长度为2的子字符串，再根据起始位置从左向右。到长度为3的时候，我们就可以利用上次的计算结果：如果中心对称的短字符串不是回文，那长字符串也不是，如果短字符串是回文，那就要看长字符串两头是否一样。这样，一直到长度最大的子字符串，我们就把整个字符串集穷举完了，但是由于使用动态规划，使计算时间从O(N^3)减少到O(n^2)。&lt;br&gt;
    
    </summary>
    
      <category term="算法" scheme="https://tongnianmianbao.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://tongnianmianbao.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="字符串" scheme="https://tongnianmianbao.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>hello world!</title>
    <link href="https://tongnianmianbao.github.io/2017/07/06/world/"/>
    <id>https://tongnianmianbao.github.io/2017/07/06/world/</id>
    <published>2017-07-06T06:02:42.000Z</published>
    <updated>2017-07-08T03:42:53.262Z</updated>
    
    <content type="html"><![CDATA[<p>hello world</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hello world&lt;/p&gt;

    
    </summary>
    
      <category term="hexo" scheme="https://tongnianmianbao.github.io/categories/hexo/"/>
    
    
      <category term="hello" scheme="https://tongnianmianbao.github.io/tags/hello/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://tongnianmianbao.github.io/2017/07/06/hello-world/"/>
    <id>https://tongnianmianbao.github.io/2017/07/06/hello-world/</id>
    <published>2017-07-06T05:35:28.611Z</published>
    <updated>2017-07-08T07:13:57.196Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
